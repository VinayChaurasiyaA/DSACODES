,
 counting sort is an algorithm for sorting a collection of objects according to
  keys that are small positive integers; that is, it is an integer sorting algorithm.
   It operates by counting the number of objects that possess distinct key values,
   and applying prefix sum on those counts to determine the positions of each key value in the output sequence.
    Its running time is linear in the number of items and the difference between the maximum key value and
     the minimum key value, so it is only suitable for direct use in situations where the variation in keys is not
     significantly greater than the number of items. It is often used as a subroutine in radix sort, another sorting
     algorithm, which can handle larger keys more efficiently.

Counting sort is not a comparison sort; it uses key values as indexes into an array and the Î©(n log n)
lower bound for comparison sorting will not apply.[1] Bucket sort may be used in lieu of counting sort,
 and entails a similar time analysis. However, compared to counting sort, bucket sort requires linked lists,
  dynamic arrays, or a large amount of pre-allocated memory to hold the sets of items within each bucket, whereas
  counting sort stores a single number (the count of items) per bucket.

  For simplicity, consider the data in the range 0 to 9.
  Input data: 1, 4, 1, 2, 7, 5, 2
    1) Take a count array to store the count of each unique object.
    Index:     0  1  2  3  4  5  6  7  8  9
    Count:     0  2  2  0   1  1  0  1  0  0

    2) Modify the count array such that each element at each index
    stores the sum of previous counts.
    Index:     0  1  2  3  4  5  6  7  8  9
    Count:     0  2  4  4  5  6  6  7  7  7

  The modified count array indicates the position of each object in
  the output sequence.
3) Rotate the array clockwise for one time.
   Index:     0 1 2 3 4 5 6 7 8 9
   Count:     0 0 2 4 4 5 6 6 7 7

  4) Output each object from the input sequence followed by
  increasing its count by 1.
  Process the input data: 1, 4, 1, 2, 7, 5, 2. Position of 1 is 0.
  Put data 1 at index 0 in output. Increase count by 1 to place
  next data 1 at an index 1 greater than this index.
  https://www.youtube.com/watch?v=YEabFTMDczQ check this out to understand