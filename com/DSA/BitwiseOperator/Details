 / Last digit in binary no is known as LSB = the least significant bit. It determines whether a no is even or odd.
 // 1 shows that no is odd and 0 shows that no is even.
 // Vice versa MSB = most significant bit, but it represents whether a no is positive or negative.
 // in this 1 shows -ve and 0 shows +ve.


 for +v nos, to change them as -ve no there are some step
 :1. change it to complement of its no
 :2. add +1 to it this process is known as 2's complement method
 <Range of numbers:
 1. byte  no =  8 bit in which every no can represent 0or1 so it'll lead to 2^8 = 256;
 actual no is stored in 7 bits max cause msb determines sign of  a no, = 2^7 =  128;
 it means 128 no of combination in +ve and 128 in -ve
 * but they're actually 256 cause 128 in positive and 127 in negative 0 is common;

* range formula: for n bits
  -2^n-1 to 2^n-1 -1;
 *FORMULA : FOR no of digits in base B of no N
  == int[(logB N) + 1]